lmSumm(Out1)
lmSumm(Out1)
acf(Out1$residuals)
plot(Nifty$NSEI.Close)
plot(Nifty$NSEI.Close, type= "p")
abline(Out1)
lines(y=Out1$coefficients[1] + Out1$coefficients[2]*lag(Nifty))
lines(y=Out1$coefficients[1] + Out1$coefficients[2]*lag(Nifty), x=index(Nifty))
lines(y=Out1$coefficients[1] + Out1$coefficients[2]*lag(Nifty), x=index(Nifty$NSEI.Close))
Nifty$date = index(Nifty)
Nifty = data.frame(Nifty)
pnorm(0.001)
qnorm(0.001)
p = 0.12*(1+exp(-50*0.1/100))
WCDR = pnorm((qnorm(0.1/100)+sqrt(p)*qnorm(0.999))/sqrt(1-p))
100*0.6*(WCDR - 0.1/100)*1.59
100*0.6*(WCDR - 0.1/100)*1.59*12.5
library(quantmod)
start_date = as.Date("1926-01-01")
getSymbols("^GSPC", from=start_date)
View(GSPC)
SPX= ClCl(GSPC)
View(SPX)
SPX= ClCl(GSPC)[-1]
sort(SPX)
View(sort(SPX))
SPX = SPX[order(SPX$ClCl.GSPC),]
getSymbols("^DJI", from=start_date)
DJ = ClCl(DJI)
View(DJ)
r=0.005/100; s1=0.02; s2=0.02; p=0.4; mu1=0.03/100; mu2=0.03/100;
T=0.5; S10=99; S20=101; K=100
g1 = (log(S10/K) + (r-s1^2/2)*T)/(s1*sqrt(T))
g2 = (log(S20/K) + (r-s2^2/2)*T)/(s2*sqrt(T))
s=sqrt(s1^2 + s2^2 - 2*p*s1*s2)
qnorm(0)
pnorm(0)
library(pbivnorm)
install.packages("pbivnorm")
library(pbivnorm)
qnorm(0.99)
install.packages("pbivnorm", quiet = TRUE)
library(pbivnorm, quietly = TRUE)
r=0.005/100; s1=0.02; s2=0.02; p=0.4; mu1=0.03/100; mu2=0.03/100;
T=0.5; S10=99; S20=101; K=100
g1 = (log(S10/K) + (r-s1^2/2)*T)/(s1*sqrt(T))
g2 = (log(S20/K) + (r-s2^2/2)*T)/(s2*sqrt(T))
s=sqrt(s1^2 + s2^2 - 2*p*s1*s2)
N1 = pbivnorm(g1 + s1*sqrt(T), (log(S2/S1)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s2-s1)/s)
install.packages("pbivnorm", quiet = TRUE)
install.packages("pbivnorm", quiet = TRUE)
library(pbivnorm, quietly = TRUE)
r=0.005/100; s1=0.02; s2=0.02; p=0.4; mu1=0.03/100; mu2=0.03/100;
T=0.5; S10=99; S20=101; K=100
g1 = (log(S10/K) + (r-s1^2/2)*T)/(s1*sqrt(T))
g2 = (log(S20/K) + (r-s2^2/2)*T)/(s2*sqrt(T))
s=sqrt(s1^2 + s2^2 - 2*p*s1*s2)
N1 = pbivnorm(g1 + s1*sqrt(T), (log(S2/S1)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s2-s1)/s)
install.packages("pbivnorm", quiet = TRUE)
library(pbivnorm, quietly = TRUE)
r=0.005/100; s1=0.02; s2=0.02; p=0.4; mu1=0.03/100; mu2=0.03/100;
T=0.5; S10=99; S20=101; K=100
g1 = (log(S10/K) + (r-s1^2/2)*T)/(s1*sqrt(T))
g2 = (log(S20/K) + (r-s2^2/2)*T)/(s2*sqrt(T))
s=sqrt(s1^2 + s2^2 - 2*p*s1*s2)
N1 = pbivnorm(g1 + s1*sqrt(T), (log(S20/S10)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s2-s1)/s)
N2 = pbivnorm(g2 + s2*sqrt(T), (log(S10/S20)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s1-s2)/s)
N3 = pbinom(g1, g2, p)
M = S10*N1 + S20*N2 - K*exp(-r*T)
M
install.packages("pbivnorm", quiet = TRUE)
# install.packages("pbivnorm", quiet = TRUE)
# library(pbivnorm, quietly = TRUE)
r=0.005/100; s1=0.02; s2=0.02; p=0.4; mu1=0.03/100; mu2=0.03/100;
T=0.5; S10=99; S20=101; K=100
g1 = (log(S10/K) + (r-s1^2/2)*T)/(s1*sqrt(T))
g2 = (log(S20/K) + (r-s2^2/2)*T)/(s2*sqrt(T))
s=sqrt(s1^2 + s2^2 - 2*p*s1*s2)
N1 = pbivnorm(g1 + s1*sqrt(T), (log(S20/S10)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s2-s1)/s)
N2 = pbivnorm(g2 + s2*sqrt(T), (log(S10/S20)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s1-s2)/s)
N3 = pbinom(g1, g2, p)
M = S10*N1 + S20*N2 - K*exp(-r*T)
M
sqrt(2)
sqrt(T)
# install.packages("pbivnorm", quiet = TRUE)
# library(pbivnorm, quietly = TRUE)
r=0.005/100; s1=s2=0.02; p=0.4; mu1=mu2=0.03/100;
T=0.5; S10=99; S20=101; K=100
g1 = (log(S10/K) + (r-s1^2/2)*T)/(s1*sqrt(T))
g2 = (log(S20/K) + (r-s2^2/2)*T)/(s2*sqrt(T))
s = sqrt(s1^2 + s2^2 - 2*p*s1*s2)
N1 = pbivnorm(g1 + s1*sqrt(T), (log(S20/S10)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s2-s1)/s)
N2 = pbivnorm(g2 + s2*sqrt(T), (log(S10/S20)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s1-s2)/s)
N3 = pbinom(g1, g2, p)
M = S10*N1 + S20*N2 - K*exp(-r*T)*N3
M
N3 = pbinom(g1, g2, p)
log(S10/K)
(r-s1^2/2)
s1^2/2
r
pnorm(-1.96)
N3 = pbivnorm(g1, g2, p)
M = S10*N1 + S20*N2 - K*exp(-r*T)*N3
M
# install.packages("pbivnorm", quiet = TRUE)
# library(pbivnorm, quietly = TRUE)
Op(r=0.005/100, s1==0.02, p=0.4, mu1=mu2=0.03/100,
# install.packages("pbivnorm", quiet = TRUE)
# library(pbivnorm, quietly = TRUE)
Op(r=0.005/100, s1==0.02, p=0.4, mu1=mu2=0.03/100, T=0.5, S10=99, S20=101, K=100){
# install.packages("pbivnorm", quiet = TRUE)
# library(pbivnorm, quietly = TRUE)
Op(r=0.005/100, s1=s2=0.02, p=0.4, mu1=mu2=0.03/100, T=0.5, S10=99, S20=101, K=100){
# install.packages("pbivnorm", quiet = TRUE)
# library(pbivnorm, quietly = TRUE)
Op(r=0.005/100, s1=0.02, s2=0.02 p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, K=100){
# install.packages("pbivnorm", quiet = TRUE)
# library(pbivnorm, quietly = TRUE)
Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, K=100){
# install.packages("pbivnorm", quiet = TRUE)
# library(pbivnorm, quietly = TRUE)
Op = function(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, K=100){
g1 = (log(S10/K) + (r-s1^2/2)*T)/(s1*sqrt(T))
g2 = (log(S20/K) + (r-s2^2/2)*T)/(s2*sqrt(T))
s = sqrt(s1^2 + s2^2 - 2*p*s1*s2)
N1 = pbivnorm(g1 + s1*sqrt(T), (log(S20/S10)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s2-s1)/s)
N2 = pbivnorm(g2 + s2*sqrt(T), (log(S10/S20)-s^2*sqrt(T)/2)/(s*sqrt(T)), (p*s1-s2)/s)
N3 = pbivnorm(g1, g2, p)
M = S10*N1 + S20*N2 - K*exp(-r*T)*N3
M}
Op()
D1 = (Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99+.05, S20=101, 100) - Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99+.05, S20=101, 100))/0.05
D1 = (Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99+.05, S20=101, 100) - Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, 100))/0.05
D2 = (Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101+.05, 100) - Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, 100))/0.05
D11 = (Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, 100) - Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99-0.05, S20=101, 100))/0.05
G1 = (D1-D11)/(0.05)
G2 = (D2-D21)/(0.05)
D1 = (Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99+.05, S20=101, 100) - Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, 100))/0.05
D2 = (Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101+.05, 100) - Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, 100))/0.05
D11 = (Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, 100) - Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99-0.05, S20=101, 100))/0.05
D21 = (Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101, 100) - Op(r=0.005/100, s1=0.02, s2=0.02, p=0.4, mu1=0.03/100, mu2=0.03/100, T=0.5, S10=99, S20=101-0.05, 100))/0.05
G1 = (D1-D11)/(0.05)
G2 = (D2-D21)/(0.05)
N1
# Deltas
D1 = (Op(S10=99+.05, S20=101) - Op(S10=99, S20=101))/0.05
d
d = 0.05
# Deltas
D1 = (Op(S10=99+d, S20=101) - Op(S10=99-d, S20=101))/(2*d)
# Deltas
D1 = (Op(S10=99+d) - Op(S10=99-d))/(2*d)
D2 = (Op(S20=101+d) - Op(S20=101-d))/(2*d)
S10=99,
D2 = (Op(S10=99, S20=101+d) - Op(S10=99, S20=101-d))/(2*d)
D2
D2 = (Op(S20=101+d) - Op(S20=101-d))/(2*d)
D2
G1
# Gamma
G1 = (Op(S10=99+d) + Op(S10=99-d)-2*Op(S10=99))/d^2
G1
G2 = (Op(S20=101+d) + Op(S20=101-d) - 2*Op(S20=101))/d^2
G2
G12 = (Op(S10=99+d) + Op(S20=101+d)- 2*Op())/d^2
G12 = (Op(S10=99+d, S20=101+d) + Op(S10=99-d, S20=101-d) - Op(S10=99+d, S20=101-d) - Op(S10=99-d, S20=101+d))/(4*d^2)
# Mean and Variance
M1 = D1*mu1*S10 + D2*mu2*S20 + G1/2*(mu1^2 + s1^2)*S10^2 + G2/2*(mu2^2 + s2^2)*S20^2 + G12*(p*s1*s2 + mu1*mu2)*S10*S20
M2 = sqrt(D1^2*s1^2*S10^2 + D2^2*s2^2*S20^2 + 2*D1*D2*p*s1*s2*S10*S20)
VaR = 2.326348*M2 - M1
VaR = qnorm(0.99)*M2 - M1
# Mean and Variance
M = D1*mu1*S10 + D2*mu2*S20
# VaR using First Formula
qnorm(0.99)*M2 - M
# VaR using Second Formula
qnorm(0.99)*M2 - M1
N = 10^5
dW1 = rnorm(N)*sqrt(T/N)
dW2 = p*dW1 + sqrt(1-p^2)*rnorm(N)*sqrt(T/N)
dW1 = rnorm(N)*sqrt(T)
dW2 = p*dW1 + sqrt(1-p^2)*rnorm(N)*sqrt(T)
L = matrix(c(2,0,0,6,1,0,-8,5,3), nrow=3, byrow = TRUE)
View(L)
L %>% t(L)
L %<% t(L)
L %% t(L)
L %*% t(L)
A = L %*% t(L)
qnorm(0.05)
qnorm(0.01)
qnorm(0)
pnorm(0)
qnorm(0.9)
qnorm(0.95)
qnorm(0.95)
qnorm(0.975)
qnorm(0.98)
x = c(0,0.9, 0.95, 0.975, 0.98, 0.99, 0.995)
qnorm(c)
qnorm(x)
x[1] = .5
qnorm(x)
t(qnorm(x))
t(t(qnorm(x)))
View(cbind(x, qnorm(x)))
View(cbind(x*100, qnorm(x)))
qnorm(0.997)
qnorm(0.999)
qnorm(0.9971)
pnorm(3)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
?ggplot2
library(quantmod)
Dt_from = as.Date("1925-12-31")
getSymbols("SPX", from=Dt_from)
getSymbols("DJI", from=Dt_from)
# getSymbols("DEXJPUS",src="FRED") # FX rates from FRED
getSymbols("T10Y3M",src="FRED") #load US Treasury 10y from Fed Fred
Comb_DE = merge(DJI[,6], T10Y3M, all = FALSE)
par(mar = c(5,5,2,5))
with(Comb_DE, plot(index(Comb_DE), T10Y3M, type="h", up.col="green", dn.col="red3", ylab=expression(italic("T10Y3M"))))
Comb_DE = cbind(index(Comb_DE), Comb_DE)
write.csv(Comb_DE, "Comb.csv")
index(Comb_DE)
Comb_DE
Comb_DE = cbind(index(Comb_DE), data.frame(Comb_DE))
View(Comb_DE)
write.csv(Comb_DE, "Comb.csv")
write.csv(Comb_DE, "Comb.csv")
getSymbols("A191RL1Q225SBEA",src="FRED") #US GDP growth rate
View(A191RL1Q225SBEA)
Comb_DE = merge(DJI[,6], T10Y3M, A191RL1Q225SBEA, all = FALSE)
View(Comb_DE)
Comb_DE = merge("DJI"=DJI[,6], T10Y3M, "GDP"=A191RL1Q225SBEA, all = FALSE)
View(A191RL1Q225SBEA)
View(Comb_DE)
colnames(Comb_DE) = c("DJI", "T10Y3M", "GDP")
View(Comb_DE)
Comb_DE = cbind(index(Comb_DE), data.frame(Comb_DE))
View(Comb_DE)
Comb_DE = cbind("date"=index(Comb_DE), data.frame(Comb_DE))
View(Comb_DE)
Comb_DE = merge(DJI[,6], T10Y3M, A191RL1Q225SBEA, all = FALSE)
colnames(Comb_DE) = c("DJI", "T10Y3M", "GDP")
Comb_DE = cbind("date"=index(Comb_DE), data.frame(Comb_DE))
View(Comb_DE)
write.csv(Comb_DE, "Comb.csv", row.names = FALSE)
Comb_DE = merge(DJI[,6], T10Y3M, A191RL1Q225SBEA, all = TRUE)
colnames(Comb_DE) = c("DJI", "T10Y3M", "GDP")
Comb_DE = cbind("date"=index(Comb_DE), data.frame(Comb_DE))
write.csv(Comb_DE, "Comb.csv", row.names = FALSE)
View(Comb_DE)
colnames(Comb_DE) = c("DJI", "T10Y3M", "GDP")
plot(Delta)
# list all packages where an update is available
old.packages()
# update, without prompts for permission/clarification
update.packages(ask = FALSE)
# list all packages where an update is available
old.packages()
reprex:::reprex_addin()
# check installed packages
installed.packages()
install.packages(c("gss", "httpuv"))
setwd("~/")
getwd()
setwd("C:/Users/mohit/OneDrive - University of California/R")
library(quantmod)
library(ggplot2)
library(data.table)
getSymbols("^DJI", from=as.Date("1900-01-01"))
getSymbols("^GSPC", from=as.Date("1900-01-01"))
frm_dt = as.Date("1946-01-01")
# Id_a <- function(Ind = DJI, frm = ){
#      Id = data.table("Dt" = as.Date(index(Ind)), "Cl" = as.vector(Id[,4]))
#      Id[, Hg := cummax(Ind)]
#      Id[, Dd := 1-Cl/Hg]
#      Id[, Hg_dt := ifelse(Hg==Cl, Dt, lag(Dt))]
#      Id[, ]
# }
DJ = data.table("Dt" = index(DJI), "DJI" = as.vector(DJI$DJI.Close))
DJ[, High := cummax(DJI)]
DJ[, Drawdown := 1-DJI/High]
# plot(x=DJ$Dt, y=DJ$DJI, log="y", type="l")
# grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = par("lwd"), equilogs = TRUE)
# lines(x=DJ$Dt, y=DJ$High, col="red")
# getSymbols("^GSPC", from=as.Date("1900-01-01"))
SP = data.table("Dt" = index(GSPC), "Cl" = as.vector(GSPC$GSPC.Close))
SP = SP[Dt>=frm_dt]
SP[, High := cummax(Cl)]
SP[, Drawdown := 1-Cl/High]
# SP[, Hg_dt := ifelse(High==Cl, Dt, NA)]
# plot(x=DJ$Dt, y=DJ$Drawdown, type="l", col="blue", ylim=rev(range(DJ$Drawdown)))
# abline(h = mean(DJ$Drawdown[DJ$Drawdown>0])+2*sd(DJ$Drawdown[DJ$Drawdown>0]), col="red2")
# abline(h = mean(DJ$Drawdown[DJ$Drawdown>0])+sd(DJ$Drawdown[DJ$Drawdown>0]), col="red1")
# abline(h = mean(DJ$Drawdown[DJ$Drawdown>0])+3*sd(DJ$Drawdown[DJ$Drawdown>0]), col="red3")
# abline(h = DJ$Drawdown[nrow(DJ)], col="red") # current level
# abline(h=0.2, col="orange" ) # Bear market
# DJ1 = ClCl(DJI)[index(DJI)>=frm_dt,]
# plot(DJ1)
# lines(x=index(DJ1), y=repeat(mean(DJ1$ClCl.DJI)+3*sd(DJ1$ClCl.DJI)), n=nrow(DJ1))
# abline(h=mean(DJ1$ClCl.DJI)+3*sd(DJ1$ClCl.DJI), col="green")
# abline(h=mean(DJ1$ClCl.DJI)-3*sd(DJ1$ClCl.DJI), col="red")
# plot(x=SP$Dt, y=SP$Drawdown, type="l", col="blue")
# abline(h = mean(SP$Drawdown[SP$Drawdown>0])+2*sd(SP$Drawdown[SP$Drawdown>0]), col="red2")
# abline(h = mean(SP$Drawdown[SP$Drawdown>0])+sd(SP$Drawdown[SP$Drawdown>0]), col="red1")
# abline(h = mean(SP$Drawdown[SP$Drawdown>0])+3*sd(SP$Drawdown[SP$Drawdown>0]), col="red3")
####################### Recession bars ##############################
unrate = getSymbols('UNRATE',src='FRED', auto.assign=F)
unrate.df = data.frame(date=time(unrate), coredata(unrate) )
recessions.df = read.table(textConnection(
"Peak, Trough
1857-06-01, 1858-12-01
1860-10-01, 1861-06-01
1865-04-01, 1867-12-01
1869-06-01, 1870-12-01
1873-10-01, 1879-03-01
1882-03-01, 1885-05-01
1887-03-01, 1888-04-01
1890-07-01, 1891-05-01
1893-01-01, 1894-06-01
1895-12-01, 1897-06-01
1899-06-01, 1900-12-01
1902-09-01, 1904-08-01
1907-05-01, 1908-06-01
1910-01-01, 1912-01-01
1913-01-01, 1914-12-01
1918-08-01, 1919-03-01
1920-01-01, 1921-07-01
1923-05-01, 1924-07-01
1926-10-01, 1927-11-01
1929-08-01, 1933-03-01
1937-05-01, 1938-06-01
1945-02-01, 1945-10-01
1948-11-01, 1949-10-01
1953-07-01, 1954-05-01
1957-08-01, 1958-04-01
1960-04-01, 1961-02-01
1969-12-01, 1970-11-01
1973-11-01, 1975-03-01
1980-01-01, 1980-07-01
1981-07-01, 1982-11-01
1990-07-01, 1991-03-01
2001-03-01, 2001-11-01
2007-12-01, 2009-06-01"), sep=',',
colClasses=c('Date', 'Date'), header=TRUE)
# Dow Jones
g1 = ggplot(DJ) + geom_line(aes(x=Dt, y=DJI, col="Dow Jones Index")) + theme_bw() + scale_y_log10() + geom_line(aes(x=Dt, y=High, col="All time High"))
recessions.trim = recessions.df[recessions.df$Trough>min(DJ$Dt),]
g2 = g1 + geom_rect(data=recessions.trim, aes(xmin=Peak, xmax=Trough, ymin=0, ymax=max(DJ$DJI)), fill='pink', alpha=0.4)
g3 = g2 + geom_point(data =DJ[DJ$Drawdown>DJ$Drawdown[nrow(DJ)]], aes(x=Dt, y=DJI, col="current level", alpha=0.1))
g4 = ggplot(DJ) + geom_line(aes(x=Dt, y=Drawdown)) + theme_bw() + ylim(rev(range(DJ$Drawdown))) + ggtitle("Dow Jones Drawdown")
g5 = g4 + geom_line(data =DJ[DJ$Drawdown>DJ$Drawdown[nrow(DJ)]], aes(x=Dt, y=Drawdown, col="current level"))
g6 = g4 + geom_hline(yintercept = max(DJ$Drawdown[(nrow(DJ)-251):nrow(DJ)]), col="red")
# SP500
F1 = ggplot(SP) + geom_line(aes(x=Dt, y=Cl)) + theme_bw() + scale_y_log10() + geom_line(aes(x=Dt, y=High, color="blue")) + theme(legend.position = "none") + xlab("") + ylab("") + ggtitle("S&P 500")
recessions.trim2 = recessions.df[recessions.df$Trough>min(SP$Dt),]
F2 = F1 + geom_rect(data=recessions.trim2, aes(xmin=Peak, xmax=Trough, ymin=0, ymax=max(SP$Cl)), fill='pink', alpha=0.4)
F3 = F2 + geom_point(data =SP[SP$Drawdown>SP$Drawdown[nrow(SP)]], aes(x=Dt, y=Cl, col="current level"))
F4 = ggplot(SP) + geom_line(aes(x=Dt, y=Drawdown)) + theme_bw() + ylim(rev(range(SP$Drawdown))) + geom_rect(data=recessions.trim2, aes(xmin=Peak, xmax=Trough, ymin=0, ymax=max(SP$Drawdown)), fill='pink', alpha=0.4) + xlab("") + ggtitle("S&P 500 Drawdown")
F5 = F4 + geom_line(data =SP[SP$Drawdown>SP$Drawdown[nrow(SP)]], aes(x=Dt, y=Drawdown, col="current level"))
F6 = F4 + geom_hline(yintercept = max(SP$Drawdown[(nrow(SP)-251):nrow(SP)]), col="red")
H1 = ggplot(SP[SP$Drawdown>=n]) + geom_line(aes(x=Dt, y=(Drawdown/n))) + theme_bw() + ylim(rev(range(SP$Drawdown))) + geom_rect(data=recessions.trim2, aes(xmin=Peak, xmax=Trough, ymin=0, ymax=max(SP$Drawdown)), fill='pink', alpha=0.4)
# 1 month SP500
SP.mth = SP[(nrow(SP)-18):nrow(SP),]
SP.mth[, chan := Cl/shift(Cl)-1]
# plot(x=SP.mth$Dt, y=SP.mth$chan, type="h")
#################### Yearly returns #################
SP.ann = SP[endpoints(GSPC, on="years")]
SP.ann[, Ret_1Y := 100*Cl/shift(Cl) - 100]
SP.ann = SP.ann[-c(1,nrow(SP.ann)),]
hist(SP.ann$Ret_1Y, 92)
sum(SP.ann$Ret_1Y >=20)
F1 + geom_area(data=SP[Drawdown>0.2,], aes(x=Dt, y=Cl, color = "red"))
H1
g1
g2
g3
g4
g5
g6
max(SP$High)
max(SP$High)*.9
max(SP$High)*.89
max(SP$High)*.885
last(SP$Drawdown)
library(quantmod)
library(data.table)
library(ggplot2)
getSymbols("^NSEI")
NSEI = NSEI[,"NSEI.Adjusted"]
colnames(NSEI) = "Close"
Nifty = data.table("Dates" = index(NSEI), NSEI[,1])
# Nifty = Nifty[Dates>=as.Date("2012-01-01"),]
Budget = data.table("FM"=c("NS", "NS", "PG", "AJ", "AJ", "AJ", "AJ", "AJ", "PC", "PC", "PM"), "Dates" = as.Date(c("2020-01-31", "2019-07-05","2019-02-01","2018-02-01","2017-02-01","2016-02-29","2015-02-28","2014-07-10","2014-02-17","2013-02-28","2012-03-16")))
Nifty = merge(Nifty, Budget, by="Dates", all = TRUE)
Nifty[is.na(Close)&!is.na(FM),"Close"] = 8901.85
Nifty = Nifty[!is.na(Close),]
Nifty[!is.na(FM), BR := round((Close/shift(Close)-1)*100,2)]
ggplot(data=Nifty, mapping = aes(x=Dates, y=Close, label=FM)) + geom_line() + theme_bw() + geom_label(data=Nifty[!is.na(FM),], aes(label=paste0(FM,",",BR,"%")),hjust=0, vjust=0, col="blue") + geom_point(data=Nifty[!is.na(FM),], color="blue", size=3) + geom_line(data = Nifty[!is.na(FM),], col="blue") + scale_y_log10()
# acf(Nifty$Close)
abline(lm(data = SP500, log(Close) ~ Dates)$coefficients)
source('C:/Users/mohit/OneDrive - University of California/R/Test.R')
source('C:/Users/mohit/OneDrive - University of California/R/UST.R')
T10Y3M
plot(T10Y3M, type = "h", up.col = "green", dn.col = "red")
# getSymbols("DEXJPUS",src="FRED") # FX rates from FRED
getSymbols("T10Y3M",src="FRED") #load US Treasury 10y from Fed Fred
View(T10Y3M)
plot(T10Y3M)
plot(T10Y3M, x=index(T10Y3M), y=T10Y3M$T10Y3M)
c(1:1)
x= 9
y = c(10, 20, 20, 10, 10, 30, 50, 10, 20)
library(dplyr)
y %>% unique(y)
summarise(y, count)
summarise(y, unique(y) %>% count())
summarise(y, unique(y) %>% count
)
summarise(y, unique(y), count)
summarise(y, unique(y) %>% count)
y %>% group_by(unique(y)) %>% summarise(Ct = count)
x= c(10, 20, 20, 10, 10, 30, 50, 10, 20)
y = data.table::data.table(x)
View(y)
library(dplyr)
y %>% group_by(x) %>% summarise(count)
y %>% group_by(x) %>% summarise(count(x))
summarise(group_by(y, x), Ct = count(x))
summarise(group_by(y, x), Ct = length(x))
z = summarise(group_by(y, x), Ct = length(x))
View(z)
library(data.table)
Z = data.table(z)
z = data.table(z)
rm(Z)
z[, Pair := int(Ct/2)]
z[, Pair := as.integer(Ct/2)]
sum(z$Pair)
summary(x)
summary(y)
str(x)
def(x)
install.packages("RPostgres")
install.packages("RPostgreSQL")
install.packages('installr')
library(installr)
install.packages('installr')
updater()
library(installr)
updateR()
library(quantmod)
mtrx = matrix(c(3,5,8,4))
mtrx = matrix(c(3,5,8,4), nrow=2, ncol=2, byrow = T)
mtrx*mtrx
pnorm(1.96)
ls(pat="^V")
X = 'api.covid19india.org/csv/latest/raw_data6.csv'
library(readr)
X = read_csv(X)
library(readr)
raw_data6 <- read_csv("C:/Users/mohit/Desktop/raw_data6.csv")
View(raw_data6)
unique(raw_data6$`Current Status`)
library(quantmod)
library(readxl)
library(readr)
library(data.table)
library(ggplot2)
library(roll)
library(devtools)
library(XML)
setwd('C:/Users/mohit/OneDrive - University of California/R/SPX vs NSE/')
# INR.old = read_csv('BankWise.csv'); INR.new = read_csv('USD_INR.csv')
# INR = data.table(rbind(read_csv('USD_INR.csv'), read_csv('BankWise.csv')))
# Load the NSE 500 Total Return Index
NSE500TRI = data.table(read_csv('NSE500TRI.csv'), stringsAsFactors = F)
colnames(NSE500TRI) = c("Date","NSE500TRI")
NSE500TRI[, Date := as.Date(Date, format = '%d-%b-%Y')]
# Load the currency files
INR.old = data.table(readHTMLTable('BankWise.xls', stringsAsFactors = F)[[1]])
colnames(INR.old) = c("Date","USD")
INR.old[, Date := as.Date(Date, format = '%d/%m/%Y')]
INR.old[, USD := as.numeric(USD)]
INR.new = data.table(readHTMLTable('USD_INR.xls', stringsAsFactors = F)[[2]])
colnames(INR.new) = c("Date","USD")
INR.new[, Date := as.Date(Date, format = '%d %b %Y')]
INR.new[, USD := as.numeric(USD)]
INR = rbind(INR.new, INR.old[-1])
rm(INR.new, INR.old) # Remove old files
# Combine USD & NSE500 file
NSE500 = merge(NSE500TRI, INR, by = 'Date', all = T)
NSE500 = NSE500[order(Date),]
NSE500[, NSE500TRD := NSE500TRI/USD]
# Load S&P 500 Total Return Index
getSymbols("^SP500TR", from=as.Date("1900-01-01"))
SP500 = data.table("Date" = index(SP500TR), "SP500TR" = as.vector(SP500TR$SP500TR.Close))
# write.csv(SP500, "SP500.csv", col.names = F)
# Combine all files
NSE500 = data.table(merge(NSE500, SP500, by="Date", all = T))
NSE500[, NSE500TRD := NSE500TRD/max(NSE500TRD, na.rm = T)*max(SP500TR, na.rm = T)]
NSE500 = NSE500[!is.na(NSE500TRD/SP500TR),]
# Remove the other files
rm(SP500TR, INR, NSE500TRI, SP500)
View(NSE500)
